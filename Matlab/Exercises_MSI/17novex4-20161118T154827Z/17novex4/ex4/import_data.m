%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/tobi/Documents/Uni-Freiburg/SYSCOP/Tutor MSI/repo/draft_test/GMXUAC00001-preprocessed.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/10/28 11:48:04

%% Initialize variables.
filename = 'GMXUAC00001-preprocessed.csv';
delimiter = ',';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,4,5,6,7,8,9]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [2,4,5,6,7,8,9]);
rawCellColumns = raw(:, [1,3,10,11,12,13,14]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
VarName1 = rawCellColumns(:, 1);
VarName2 = cell2mat(rawNumericColumns(:, 1));
pressure = cell2mat(rawNumericColumns(:, 2)) / 1e5; % 10^5 Pa
VarName5 = cell2mat(rawNumericColumns(:, 3));
altitude = cell2mat(rawNumericColumns(:, 4)) / 1e3; % km
VarName7 = cell2mat(rawNumericColumns(:, 5));
temperature = cell2mat(rawNumericColumns(:, 6))  / 10;% C
tempTrust = cell2mat(rawNumericColumns(:, 7))  == 1; % logical

%% convert time strings to numeric time stamp
timeStamp = zeros(size(VarName1));
for i = 1:size(VarName1,1)
    timeString = VarName1{i};
    timeStamp(i) = str2num(strrep(timeString, ' ', ''));
end

%% remove experiments with insufficient measurements
pp = unique(pressure).';
tt = unique(timeStamp).';
presMask = false(size(pressure));
for p = pp(3:end)
    measAvail = timeStamp(pressure == p); % timestamp where p is available
    tt = intersect(tt,measAvail);
    presMask = presMask | (pressure == p);
end
disp(['selected ' num2str(length(tt)) ' experiments'])
timeMask = false(size(timeStamp));
for t=tt.'
    timeMask = timeMask | (timeStamp == t);
end
mask = timeMask & presMask;

% filter out data points
timeStamp = timeStamp(mask);
pressure =  pressure(mask);
altitude = altitude(mask);
temperature = temperature(mask); % real data
tempTrust = tempTrust(mask);

% tweak data to represent fictive sensoric problems
maskP4 = pressure == pp(4);
temperature(maskP4) = 2*temperature(maskP4) + 50;
maskP3 = pressure == pp(3);
temperature(maskP3) = 3*temperature(maskP3) + 110;


%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R VarName1 VarName2 VarName5 VarName7 i measAvail p pp presMask t timeMask timeString tt tempTrust altitude maskP3 maskP4 mask;